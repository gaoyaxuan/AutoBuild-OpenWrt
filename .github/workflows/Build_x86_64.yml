
name: Build_x86_64

on:
  release:
    types: [published]

  push:
    branches:
      - master

#  schedule:
#    - cron: 0 8 * * 5

#  watch:
#    types: [started]

jobs:
  build:
    timeout-minutes: 1000
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /usr/local/lib/android  \
          /etc/php
        sudo -E apt-get -qq -y purge \
          azure-cli \
          ghc* \
          zulu* \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*  \
          hhvm*
        sudo -E apt-get -qq update
        sudo -E apt update -y
        sudo -E apt full-upgrade -y
        sudo -E apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
        rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq -y autoremove --purge
        sudo -E apt-get  -qq  clean
        echo "-----------------disk-------------------"
        df -Th
        

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Clone source code
      env:
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        # 需要回退插件版本,移除 --depth 1 参数
        git clone  $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "src-git docker https://github.com/lisaac/luci-lib-docker.git" >> ./feeds.conf.default
        echo "src-git dockerman https://github.com/lisaac/luci-app-dockerman.git" >> ./feeds.conf.default
        echo "src-git kenzok https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        # 替换成下载所有历史
        sed -i "s/src-git/src-git-full/g"  ./feeds.conf.default


    - name: Import external feeds
      working-directory: ./openwrt
      run: |
        git clone https://github.com/destan19/OpenAppFilter.git  package/OpenAppFilter/
        git clone https://github.com/iwrt/luci-app-ikoolproxy  package/luci-app-ikoolproxy/
        #使用自己修改的luci-app-pushbot
        rm -rf feeds/kenzok/luci-app-pushbot/
        git clone https://github.com/gaoyaxuan/luci-app-pushbot.git  package/luci-app-pushbot/

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc) V=s
        make download -j$(nproc) V=s

    - name: Build firmware
      working-directory: ./openwrt
      timeout-minutes: 900
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s

    - name: Gzip
      run: |
        tar -czvf Openwrt.tar.gz openwrt/bin

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}
        release_name: Release ${{ github.run_id }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Openwrt.tar.gz
        asset_name: Openwrt.tar.gz
        asset_content_type: application/gzip
